//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MODEL.ViewModel
{
    using System;
    using System.Collections.Generic;
    
    public partial class VIEW_MST_PRD_CATE_P
    {
        public int CATE_ID { get; set; }
        public string CATEGEOR_NAME { get; set; }
        public int PARENT_ID { get; set; }
        public Nullable<int> ISSHOW { get; set; }
        public string CATE_MAPS { get; set; }
        public string CATE_URL { get; set; }
        public string ACTIVE { get; set; }
        public string ISLEAVES { get; set; }
        public Nullable<decimal> VERSION { get; set; }
        public string SYNCOPERATION { get; set; }
        public Nullable<System.DateTime> SYNCVERSION { get; set; }
        public string SYNCFLAG { get; set; }
        public Nullable<System.DateTime> CREATE_DT { get; set; }
        public string CREATE_BY { get; set; }
        public Nullable<System.DateTime> MODIFY_DT { get; set; }
        public string MODIFY_BY { get; set; }
    }
    public partial class VIEW_MST_PRD_CATE:VIEW_MST_PRD_CATE_P
    {
    
    
    
    	public static MST_PRD_CATE ToEntity(VIEW_MST_PRD_CATE model)
        {
           MST_PRD_CATE item = new MST_PRD_CATE();
       		item.CATE_ID=model.CATE_ID;
    		item.CATEGEOR_NAME=model.CATEGEOR_NAME;
    		item.PARENT_ID=model.PARENT_ID;
    		item.ISSHOW=model.ISSHOW;
    		item.CATE_MAPS=model.CATE_MAPS;
    		item.CATE_URL=model.CATE_URL;
    		item.ACTIVE=model.ACTIVE;
    		item.ISLEAVES=model.ISLEAVES;
    		item.VERSION=model.VERSION;
    		item.SYNCOPERATION=model.SYNCOPERATION;
    		item.SYNCVERSION=model.SYNCVERSION;
    		item.SYNCFLAG=model.SYNCFLAG;
    		item.CREATE_DT=model.CREATE_DT;
    		item.CREATE_BY=model.CREATE_BY;
    		item.MODIFY_DT=model.MODIFY_DT;
    		item.MODIFY_BY=model.MODIFY_BY;
            return item;
        }
    
    
    	public static VIEW_MST_PRD_CATE ToViewModel(MST_PRD_CATE model)
        {
           VIEW_MST_PRD_CATE item = new VIEW_MST_PRD_CATE();
       		item.CATE_ID=model.CATE_ID;
    		item.CATEGEOR_NAME=model.CATEGEOR_NAME;
    		item.PARENT_ID=model.PARENT_ID;
    		item.ISSHOW=model.ISSHOW;
    		item.CATE_MAPS=model.CATE_MAPS;
    		item.CATE_URL=model.CATE_URL;
    		item.ACTIVE=model.ACTIVE;
    		item.ISLEAVES=model.ISLEAVES;
    		item.VERSION=model.VERSION;
    		item.SYNCOPERATION=model.SYNCOPERATION;
    		item.SYNCVERSION=model.SYNCVERSION;
    		item.SYNCFLAG=model.SYNCFLAG;
    		item.CREATE_DT=model.CREATE_DT;
    		item.CREATE_BY=model.CREATE_BY;
    		item.MODIFY_DT=model.MODIFY_DT;
    		item.MODIFY_BY=model.MODIFY_BY;
            return item;
        }
    
    	    public static IEnumerable<VIEW_MST_PRD_CATE> ToListViewModel(IEnumerable<MST_PRD_CATE> list)
            {
                var listModel = new List<VIEW_MST_PRD_CATE>();
                foreach (MST_PRD_CATE item in list)
                {
                    listModel.Add(VIEW_MST_PRD_CATE.ToViewModel(item));
                }
                return listModel;
            }
    
    
    }
}

//----------------------------jiezhi------------------------------------

